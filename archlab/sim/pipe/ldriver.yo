                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6b803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Written by fanese-myk, use iaddq, rearrange instruction to avoid load/use hazzard
                            | # use loop unrolling 5*1
                            | # make few changes from ver0.6 to make program run faster(avoid unpredicted branch)
                            | # Line 51 is fundamental
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = l len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | # Loop header
0x032: c0f2fcffffffffffffff |         iaddq $-4, %rdx		# calculate len - 4
0x03c: 76a900000000000000   | 	jg Loop                 # if len >= 4 goto Loop
                            | 
0x045:                      | RESTT:
0x045: c0f20400000000000000 | 	iaddq $4, %rdx          # restore the old value of len
0x04f:                      | REST:
0x04f: 765900000000000000   | 	jg NOT_FINISHED         # if %rdx is greater than 0,then not finished yet
0x058: 90                   | 	ret
0x059:                      | NOT_FINISHED:
0x059: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# load *src
0x063: c0f70800000000000000 | 	iaddq $8, %rdi
0x06d: 62aa                 | 	andq %r10, %r10			# test *src
0x06f: 718200000000000000   | 	jle ADD3				# if not greater than 0, jump
0x078: c0f00100000000000000 | 	iaddq $1, %rax			# add the count of postive numbers
0x082:                      | ADD3:	
0x082: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# save
0x08c: c0f60800000000000000 | 	iaddq $8, %rsi
0x096: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x0a0: 704f00000000000000   | 	jmp REST
0x0a9:                      | Loop:
0x0a9: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0b3: c0f72800000000000000 | 	iaddq $40, %rdi		# src+=5
0x0bd: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # save *src to *rsi
0x0c7: 62aa                 | 	andq %r10, %r10		# test %r10
0x0c9: 71dc00000000000000   | 	jle ADD1			# if This number is not greater than 0, than not add %rax
0x0d2: c0f00100000000000000 | 	iaddq $1, %rax		# add the number of postive numbers
0x0dc:                      | ADD1:	
0x0dc: 50a7e0ffffffffffffff | 	mrmovq -32(%rdi), %r10	# read the second number
0x0e6: c0f62800000000000000 | 	iaddq $40, %rsi			# dst += 5
0x0f0: 40a6e0ffffffffffffff | 	rmmovq %r10, -32(%rsi)	# save *(src + 1) to *(dst + 1)
0x0fa: 62aa                 | 	andq %r10, %r10			# val <= 0?
0x0fc: 50a7e8ffffffffffffff | 	mrmovq -24(%rdi), %r10   # rearrange the instructions to avoid load/use hazzard
0x106: 711901000000000000   | 	jle ADD2				# if not, add the count
0x10f: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x119:                      | ADD2:
0x119: 40a6e8ffffffffffffff | 	rmmovq %r10, -24(%rsi)
0x123: 62aa                 | 	andq %r10, %r10
0x125: 50a7f0ffffffffffffff | 	mrmovq -16(%rdi), %r10
0x12f: 714201000000000000   | 	jle ADD4
0x138: c0f00100000000000000 | 	iaddq $1, %rax
0x142:                      | ADD4:
0x142: 40a6f0ffffffffffffff | 	rmmovq %r10, -16(%rsi)
0x14c: 62aa                 | 	andq %r10, %r10
0x14e: 50a7f8ffffffffffffff | 	mrmovq -8(%rdi), %r10
0x158: 716b01000000000000   | 	jle ADD5
0x161: c0f00100000000000000 | 	iaddq $1, %rax
0x16b:                      | ADD5:
0x16b: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)
0x175: 62aa                 | 	andq %r10, %r10
0x177: 718a01000000000000   | 	jle ADD6
0x180: c0f00100000000000000 | 	iaddq $1, %rax
0x18a:                      | ADD6:
0x18a: c0f2fbffffffffffffff | 	iaddq $-5, %rdx			# len -= 5 if(len - 4 > 0) that means len > 4
0x194: 76a900000000000000   | 	jg Loop					# if so, goto Loop:
                            | 
0x19d: 704500000000000000   | 	jmp RESTT
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1a6:                      | End:
                            | #/* $end ncopy-ys */
0x1a6:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1a8:                      | 	.align 8
0x1a8:                      | src:
0x1a8: ffffffffffffffff     | 	.quad -1
0x1b0: feffffffffffffff     | 	.quad -2
0x1b8: 0300000000000000     | 	.quad 3
0x1c0: 0400000000000000     | 	.quad 4
0x1c8: 0500000000000000     | 	.quad 5
0x1d0: faffffffffffffff     | 	.quad -6
0x1d8: 0700000000000000     | 	.quad 7
0x1e0: f8ffffffffffffff     | 	.quad -8
0x1e8: 0900000000000000     | 	.quad 9
0x1f0: 0a00000000000000     | 	.quad 10
0x1f8: 0b00000000000000     | 	.quad 11
0x200: f4ffffffffffffff     | 	.quad -12
0x208: f3ffffffffffffff     | 	.quad -13
0x210: 0e00000000000000     | 	.quad 14
0x218: f1ffffffffffffff     | 	.quad -15
0x220: f0ffffffffffffff     | 	.quad -16
0x228: efffffffffffffff     | 	.quad -17
0x230: 1200000000000000     | 	.quad 18
0x238: edffffffffffffff     | 	.quad -19
0x240: ecffffffffffffff     | 	.quad -20
0x248: ebffffffffffffff     | 	.quad -21
0x250: eaffffffffffffff     | 	.quad -22
0x258: 1700000000000000     | 	.quad 23
0x260: e8ffffffffffffff     | 	.quad -24
0x268: e7ffffffffffffff     | 	.quad -25
0x270: e6ffffffffffffff     | 	.quad -26
0x278: 1b00000000000000     | 	.quad 27
0x280: 1c00000000000000     | 	.quad 28
0x288: 1d00000000000000     | 	.quad 29
0x290: e2ffffffffffffff     | 	.quad -30
0x298: e1ffffffffffffff     | 	.quad -31
0x2a0: 2000000000000000     | 	.quad 32
0x2a8: dfffffffffffffff     | 	.quad -33
0x2b0: 2200000000000000     | 	.quad 34
0x2b8: 2300000000000000     | 	.quad 35
0x2c0: dcffffffffffffff     | 	.quad -36
0x2c8: dbffffffffffffff     | 	.quad -37
0x2d0: daffffffffffffff     | 	.quad -38
0x2d8: 2700000000000000     | 	.quad 39
0x2e0: 2800000000000000     | 	.quad 40
0x2e8: 2900000000000000     | 	.quad 41
0x2f0: d6ffffffffffffff     | 	.quad -42
0x2f8: 2b00000000000000     | 	.quad 43
0x300: 2c00000000000000     | 	.quad 44
0x308: d3ffffffffffffff     | 	.quad -45
0x310: 2e00000000000000     | 	.quad 46
0x318: d1ffffffffffffff     | 	.quad -47
0x320: d0ffffffffffffff     | 	.quad -48
0x328: 3100000000000000     | 	.quad 49
0x330: 3200000000000000     | 	.quad 50
0x338: cdffffffffffffff     | 	.quad -51
0x340: ccffffffffffffff     | 	.quad -52
0x348: 3500000000000000     | 	.quad 53
0x350: caffffffffffffff     | 	.quad -54
0x358: c9ffffffffffffff     | 	.quad -55
0x360: 3800000000000000     | 	.quad 56
0x368: c7ffffffffffffff     | 	.quad -57
0x370: 3a00000000000000     | 	.quad 58
0x378: 3b00000000000000     | 	.quad 59
0x380: 3c00000000000000     | 	.quad 60
0x388: 3d00000000000000     | 	.quad 61
0x390: c2ffffffffffffff     | 	.quad -62
0x398: 3f00000000000000     | 	.quad 63
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3b0:                      | 	.align 16
0x3b0:                      | Predest:
0x3b0: fadebc0000000000     | 	.quad 0xbcdefa
0x3b8:                      | dest:
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0:                      | Postdest:
0x5b0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5b8:                      | .align 8
                            | # Run time stack
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
                            | 
0x638:                      | Stack:
